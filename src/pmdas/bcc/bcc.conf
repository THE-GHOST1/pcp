#
# PCP BCC PMDA main config file - see pmdabcc(1) and PMDA(3)
#

# NB. Since all the modules are part of the same process, modules may
# not attach to the same kprobes as others or latter ones will fail -
# this is fixed starting with Linux kernel 4.17 / bcc 0.6.0 releases.

# NB. Cluster IDs 0-99 are reserved for modules which have a related
# tool available as part of BCC. Cluster IDs 100-199 are reserved for
# custom modules developed specifically for PCP BCC PMDA. Cluster IDs
# 200-299 are reserved for possible site-local modules.

[pmda]
# List of enabled modules
modules = biolatency,sysfork,tcpperpid,runqlat

# Prefix for metric names
prefix = bcc.

# Specifies whether BCC PMDA should exit when a module fails
module_failure_fatal = True


#
# Process related modules
#

# This module counts the number of new processes
[sysfork]
module = sysfork
cluster = 2

# This module counts the number of syscalls for given processes
# Requires ausyscall(8) to be installed.
#
# Configuration options:
# Name              - type    - default
#
# process           - string  - unset : list of names/pids or regex of processes to monitor
# errno             - str/int - unset : count syscalls returning this error only
# failed            - boolean - false : count failed syscalls only
[syscount]
module = syscount
cluster = 15
process = pmcd
#errno = EPERM
#failed = True

# This module counts the number of application method calls for given process
# java(1) must be started with -XX:+ExtendedDTraceProbes and
# php(1) needs to have USE_ZEND_DTRACE environment variable set to 1
# for this module to work. NB. This might introduce non-negligible overhead.
#
# Configuration options:
# Name              - type    - default
#
# language          - string  - unset : application language, one of:
#                                       java, perl, php, python, ruby
# process           - string  - unset : list of names/pids or regex of processes to monitor
[ucalls]
module = ucalls
cluster = 16
process = java
language = java

# This module records the scheduler run queue latency as histogram
[runqlat]
module = runqlat
cluster = 4

# This module traces new processes
#
# Configuration options:
# Name              - type    - default
#
# include_failed    - boolean - false : include failed exec()s
# command           - string  - unset : include only commands matching this regex
# args              - string  - unset : include only arguments matching this regex
# max_args          - int     - 20    : maximum number of arguments to capture
# session_count     - int     - 20    : number of closed TCP sessions to keep in the cache
# buffer_page_count - int     - 64    : number of pages for the perf ring buffer, power of two
[execsnoop]
module = execsnoop
cluster = 8
#command = sh
#args = --verbose

# This module counts how often a specific program was executed
[exectop]
module = exectop
cluster = 13

# This module records stack traces at a specific interval
# To be used in combination with Vector, which will display them as flamegraphs.
#
# Configuration options:
# Name               - type    - default
#
# pid                - int     - unset : capture this PID only
# user_stacks_only   - boolean - false : capture only user stacks
# kernel_stacks_only - boolean - false : capture only kernel stacks
# stack_storage_size - int     - 16384 : the number of unique stack traces that can be stored and displayed
# sample_frequency   - int     - 47    : sample frequency, Hertz
# sample_period      - int     - unset : sample period, number of events
[profile]
module = profile
cluster = 14


#
# Block device I/O modules
#

# This module records block device I/O latency as histogram
#
# Configuration options:
# Name   - type    - default
#
# queued - boolean - False : include OS queued time in I/O time
[biolatency]
module = biolatency
cluster = 0

# This module counts block device I/O per process
[bioperpid]
module = bioperpid
cluster = 1

# This module summarizes which processes are performing block I/O
#
# Configuration options:
# Name          - type   - default
#
# interval      - int    - 1      : interval for calculating summaries
# process_count - int    - 20     : number of processes to show
# sort          - string - -bytes : sort key: bytes/io/duration/rw
#                                   sort order can be reversed by prepending '-'
[biotop]
module = biotop
cluster = 10


#
# Filesystem modules
#

# This module traces ext4 read/write/open/fsync latencies as histogram
[ext4dist]
module = fs.ext4dist
cluster = 5

# This module traces XFS read/write/open/fsync latencies as histogram
[xfsdist]
module = fs.xfsdist
cluster = 6

# This module traces ZFS read/write/open/fsync latencies as histogram
[zfsdist]
module = fs.zfsdist
cluster = 7


#
# TCP related modules
#

# This module summarizes TCP sessions
#
# Configuration options:
# Name              - type   - default
#
# process           - string - unset : list of names/pids or regex of processes to monitor
# dport             - int    - unset : list of remote ports to monitor
# lport             - int    - unset : list of local ports to monitor
# session_count     - int    - 20    : number of closed TCP sessions to keep in the cache
# buffer_page_count - int    - 64    : number of pages for the perf ring buffer, power of two
[tcplife]
module = tcplife
cluster = 3
#process = java
#lport = 8443
#dport = 80,443

# This module traces TCP retransmits
#
# Configuration options:
# Name              - type    - default
#
# include_tlp       - boolean - false : include tail loss probe attempts
# flow_count        - int     - 20    : number of closed TCP sessions to keep in the cache
# buffer_page_count - int     - 64    : number of pages for the perf ring buffer, power of two
[tcpretrans]
module = tcpretrans
cluster = 9

# This module counts the amount of sent and received data per process
#
# Configuration options:
# Name    - type   - default
#
# process - string - unset : list of names/pids or regex of processes to monitor
# dport   - int    - unset : list of remote ports to monitor
# lport   - int    - unset : list of local ports to monitor
[tcpperpid]
module = tcpperpid
cluster = 11
#process = java
#lport = 8443
#dport = 80,443

# This module summarizes TCP throughput by host and port
#
# Configuration options:
# Name       - type - default
#
# interval   - int  - 1  : interval for calculating summaries
# conn_count - int  - 20 : number of processes to show
[tcptop]
module = tcptop
cluster = 12


#
# Probe hits modules
#

# This module counts the number of kernel tracepoint hits
# Use perf-list(1) to see currently available kernel tracepoints.
#
# Configuration options:
# Name         - type    - default
#
# compile_test - boolean - False : disable failing tracepoints on-the-fly
# process      - string  - unset : list of names/pids or regex of processes to monitor
# tracepoints  - string  - unset : file or comma-separated list of tracepoints
[tracepoint_hits]
module = tracepoint_hits
cluster = 100
compile_test = True
#process = java
tracepoints = random:urandom_read
#tracepoints = migrate:.*,tlb:.*
#tracepoints = ras:.*
#tracepoints = sock:sock_exceed_buf_limit,sock:sock_rcvqueue_full
#tracepoints = xfs:.*
#tracepoints = bcc-tracepoint.conf

# This module counts the number of USDT/dtrace probe hits
# USDT stands for user-level statically defined tracing.
# Use tplist(8) to list available USDT probes in a binary.
#
# Configuration options:
# Name    - type   - default
#
# process - string - unset : list of names/pids or regex of processes to monitor
# usdts   - string - unset : file or comma-separated list of usdts
[usdt_hits]
module = usdt_hits
cluster = 101
# Mandatory for now - https://github.com/iovisor/bcc/issues/1774
process = java
usdts = /etc/alternatives/jre/lib/server/libjvm.so:gc__begin
#usdts = bcc-usdt.conf

# This module counts the number of user-level probe (uprobes) hits
# Expects function names within defined libraries to setup probes.
#
# Configuration options:
# Name    - type   - default
#
# process - string - unset : list of names/pids or regex of processes to monitor
# uprobes - string - unset : file or comma-separated list of uprobes
[uprobe_hits]
module = uprobe_hits
cluster = 102
#process = 1
uprobes = c:malloc,c:strlen
#uprobes = bcc-uprobe.conf


#
# Java related modules
#

# This module counts the number of started and stopped threads by the JVM
#
# Configuration options:
# Name         - type   - default
#
# jvm_path     - string - /etc/alternatives/jre/lib/server/libjvm.so : path to libjvm.so (if no process)
# process      - string - unset                                      : list of names/pids or regex of processes to monitor
#                                                                      value 0 disables refreshing
[usdt_jvm_threads]
module = usdt_jvm_threads
cluster = 110
# Mandatory for now - https://github.com/iovisor/bcc/issues/1774
process = java

# This module counts the allocated bytes per Java class
# java(1) must be started with -XX:+DTraceAllocProbes
# for this module to work, and this might introduce non-negligible overhead.
#
# Configuration options:
# Name      - type   - default
#
# frequency - int    - unset                                      : sample every Nth allocation, power of two
# jvm_path  - string - /etc/alternatives/jre/lib/server/libjvm.so : path to libjvm.so (if no process)
# process   - string - unset                                      : list of names/pids or regex of processes to monitor
[usdt_jvm_alloc]
module = usdt_jvm_alloc
cluster = 120
# Mandatory for now - https://github.com/iovisor/bcc/issues/1774
process = java
