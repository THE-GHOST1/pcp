#
# Copyright (C) 2018 Marko Myllynen <myllynen@redhat.com>
# Based on the syscount BCC tool by Sasha Goldshtein:
# https://github.com/iovisor/bcc/blob/master/tools/syscount.py
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
""" PCP BCC PMDA syscount module """

# pylint: disable=invalid-name, line-too-long

import errno
import subprocess
from ctypes import c_int
from os import path

from bcc import BPF

from pcp.pmapi import pmUnits
from cpmapi import PM_TYPE_U64, PM_SEM_COUNTER, PM_COUNT_ONE
from cpmapi import PM_ERR_AGAIN

from modules.pcpbcc import PCPBCCBase

#
# BPF program
#
bpf_src = "modules/syscount.bpf"

#
# PCP BCC PMDA constants
#
MODULE = 'syscount'
METRIC = 'proc.syscall.count'
units_count = pmUnits(0, 0, 1, 0, 0, PM_COUNT_ONE)

#
# PCP BCC Module
#
class PCPBCCModule(PCPBCCBase):
    """ PCP BCC syscount module """
    def __init__(self, config, log, err):
        """ Constructor """
        PCPBCCBase.__init__(self, MODULE, config, log, err)

        self.cache = {}
        self.errno = 0
        self.failed = False
        self.pids = []

        def read_errno(errstr):
            """ Helper to read errno """
            try:
                return abs(int(errstr))
            except ValueError:
                return getattr(errno, errstr)

        for opt in self.config.options(MODULE):
            if opt == 'errno':
                self.errno = read_errno(self.config.get(MODULE, opt))
            if opt == 'failed':
                self.failed = self.config.getboolean(MODULE, opt)
            if opt == 'process':
                val = self.config.get(MODULE, opt)
                procs = self.get_proc_info(val)
                if not procs:
                    self.log("No matching PIDs found for %s, PID filtering disabled." % val)
                for proc in procs:
                    self.log("Tracing PID %s: %s %s." % (str(proc[0]), proc[1], proc[2]))
                    self.pids.append(proc[0])

        def parse_syscall(line):
            """ Helper to parse ausyscall(8) output """
            parts = line.split()
            return (int(parts[0]), parts[1].strip().decode("UTF-8"))

        try:
            out = subprocess.check_output('ausyscall --dump | tail -n +2', shell=True)
            self.syscalls = dict(map(parse_syscall, out.strip().split(b'\n')))
        except Exception: # pylint: disable=broad-except
            raise RuntimeError("ausyscall: command not found")

        self.insts = {self.syscalls[i] : c_int(1) for i in range(len(self.syscalls))}

        self.log("Initialized.")

    def metrics(self):
        """ Get metric definitions """
        name = METRIC
        self.items.append(
            # Name - reserved - type - semantics - units - help
            (name, None, PM_TYPE_U64, PM_SEM_COUNTER, units_count, 'syscall count'),
        )
        return True, self.items

    def compile(self):
        """ Compile BPF """
        try:
            with open(path.dirname(__file__) + '/../' + bpf_src) as src:
                bpf_text = src.read()
            if self.errno:
                errno_filter = "if (args->ret != -%d) return 0;" % self.errno
                bpf_text = bpf_text.replace("//FILTER_ERRNO", errno_filter)
            if self.failed:
                failed_filter = "if (args->ret >= 0) return 0;"
                bpf_text = bpf_text.replace("//FILTER_FAILED", failed_filter)
            bpf_text = self.apply_pid_filter(bpf_text, self.pids, False)
            bpf_text = bpf_text.replace("NR_SYSCALLS", str(len(self.syscalls)))

            if self.debug:
                self.log("BPF to be compiled:")
                self.log("\n" + bpf_text)

            self.bpf = BPF(text=bpf_text)
            self.log("Compiled.")
        except Exception as error: # pylint: disable=broad-except
            self.bpf = None
            self.err(str(error))
            self.err("Module NOT active!")
            raise

    def refresh(self):
        """ Refresh BPF data """
        if self.bpf is None:
            return None

        stats = self.bpf["stats"]
        for i in stats:
            val = stats[i].value
            if val:
                key = self.syscalls[i.value]
                self.cache[key] = val

        return self.insts

    def bpfdata(self, item, inst):
        """ Return BPF data as PCP metric value """
        try:
            key = self.pmdaIndom.inst_name_lookup(inst)
            return [self.cache[key], 1]
        except Exception: # pylint: disable=broad-except
            return [PM_ERR_AGAIN, 0]
